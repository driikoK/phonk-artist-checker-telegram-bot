import {
  InjectBot,
  Message,
  On,
  Start,
  Update,
  Help,
  Ctx,
  Command,
} from 'nestjs-telegraf';
import { Telegraf, Context } from 'telegraf';
import { ArtistService } from './services/artist.service';
import { UserService } from './services/user.service';
import configuration from '../../src/config';
import { User } from './entities/user.entity';
import { Artist } from './entities/artist.entity';
import { ErrorHandling } from './errors/error-handling';

@Update()
export class BotUpdate {
  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly artistService: ArtistService,
    private readonly userService: UserService,
    private readonly errorHandling: ErrorHandling,
  ) {}

  @Start()
  async startCommand(ctx: Context) {
    await ctx.reply(`–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —á–∏ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∫–∞—Ü–∞–ø, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —ñ–º'—è.`);
    try {
      const telegram_id = JSON.stringify(ctx.message.chat.id);
      const user = await this.userService.findOne(telegram_id);
      if (!user) {
        await this.userService.create(
          Object.assign(new User(), {
            telegram_id,
            name: ctx.message.from.first_name,
          }),
        );
      }
    } catch (error) {
      console.error(error);
      await this.errorHandling.logAndPinError(
        `–ü–æ–º–∏–ª–∫–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö: ${error}`,
      );
    }
  }

  @Help()
  async helpCommand(ctx: Context) {
    await ctx.reply(
      `*–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —á–∏ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∫–∞—Ü–∞–ø, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —ñ–º'—è.* \n\nüõ† –î–æ–¥–∞—Ç–∫–æ–≤—ñ  —Ñ—É–Ω–∫—Ü—ñ—ó:\n\n/statistic ‚Äî –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.`,
      {
        parse_mode: 'Markdown',
      },
    );
  }

  @Command('statistic')
  async statisticCommand(ctx: Context) {
    try {
      const users = await this.userService.findAll();
      const artists = await this.artistService.findAll();

      await ctx.reply(
        `üë§ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:  ${users.length};\n\nüë©‚Äçüé§ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:  ${artists.length};\n\nüíå –ó–≤'—è–∑–æ–∫ —ñ–∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º: @Driyko`,
      );
    } catch (error) {
      console.error(error);
      await ctx.reply('–°–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–∞—Ü—é—î üòî');
      await this.errorHandling.logAndPinError(
        `–ü–æ–º–∏–ª–∫–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö: ${error}`,
      );
    }
  }

  @Command('sendMessage')
  async sendMessage(@Ctx() ctx: Context) {
    try {
      if (ctx.message.from.id == parseInt(configuration.admin_id)) {
        if (!('reply_to_message' in ctx.message)) {
          await ctx.reply(
            '–í–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –±–∞–∂–∞—î—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏!',
          );

          return console.log('No reply_to_message');
        }
        const replyMsg = ctx.message.reply_to_message;

        if (replyMsg) {
          const users = await this.userService.findAll();
          for (const user of users) {
            try {
              await ctx.telegram.sendCopy(user.telegram_id, replyMsg);
            } catch (error) {
              console.log(error);
              continue;
            }
          }

          await ctx.reply('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!');
        }
      } else {
        await ctx.reply('–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!');
      }
    } catch (error) {
      console.error(error);
      await ctx.reply('–°–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–∞—Ü—é—î üòî');
      await this.errorHandling.logAndPinError(`–ü–æ–º–∏–ª–∫–∞: ${error}`);
    }
  }

  @Command('addArtist')
  async addArtist(@Message('text') message: string, @Ctx() ctx: Context) {
    try {
      if (ctx.message.from.id == parseInt(configuration.admin_id)) {
        const name = message.match(/name="(.*?)"/)[1];
        const nationality = message.match(/nationality="(.*?)"/)[1];

        const artist = Object.assign(new Artist(), { name, nationality });

        await this.artistService.create(artist);

        await ctx.reply('–í–∏–∫–æ–Ω–∞–≤—Ü—è –¥–æ–¥–∞–Ω–æ!');
      } else {
        await ctx.reply('–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!');
      }
    } catch (error) {
      console.error(error);
      await ctx.reply('–°–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–∞—Ü—é—î üòî');
      await this.errorHandling.logAndPinError(
        `–ü–æ–º–∏–ª–∫–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö: ${error}`,
      );
    }
  }

  @Command('updateArtist')
  async updateArtist(@Message('text') message: string, @Ctx() ctx: Context) {
    try {
      if (ctx.message.from.id == parseInt(configuration.admin_id)) {
        const currentName = message.match(/name="(.*?)"/)[1];
        const newName = message.match(/new_name="(.*?)"/)?.[1] ?? null;
        const newNationality =
          message.match(/new_nationality="(.*?)"/)?.[1] ?? null;

        const artist = await this.artistService.findOne(currentName);

        if (!artist) {
          await ctx.reply('–¢–∞–∫–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è –Ω–µ–º–∞—î!');
        } else {
          const updatedArtist = Object.assign(artist, {
            name: newName ?? artist.name,
            nationality: newNationality ?? artist.nationality,
          });

          await this.artistService.update(artist.id, updatedArtist);

          await ctx.reply('–í–∏–∫–æ–Ω–∞–≤—Ü—è –æ–Ω–æ–≤–ª–µ–Ω–æ!');
        }
      } else {
        await ctx.reply('–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!');
      }
    } catch (error) {
      console.error(error);
      await this.errorHandling.logAndPinError(
        `–ü–æ–º–∏–ª–∫–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö: ${error}`,
      );
    }
  }

  @On('text')
  async getMessage(@Message('text') message: string, @Ctx() ctx: Context) {
    try {
      const name = message.toLocaleLowerCase();
      const artist = await this.artistService.findOne(name);
      await ctx.telegram.forwardMessage(
        configuration.chat_for_all_logs,
        ctx.message.chat.id,
        ctx.message.message_id,
      );
      if (!artist) {
        await ctx.reply('–ù–∞ –∂–∞–ª—å, –Ω–µ –≤—ñ–¥–æ–º–æ, –∞–±–æ –∂ –≤–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –ø–æ–º–∏–ª–∫—É üòî');
        await ctx.telegram.forwardMessage(
          configuration.chat_for_unknow_artists,
          ctx.message.chat.id,
          ctx.message.message_id,
        );
      } else {
        await ctx.reply(artist.nationality);
      }
    } catch (error) {
      console.error(error);
      await ctx.reply('–°–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–∞—Ü—é—î üòî');
      await this.errorHandling.logAndPinError(
        `–ü–æ–º–∏–ª–∫–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö: ${error}`,
      );
    }
  }
}
