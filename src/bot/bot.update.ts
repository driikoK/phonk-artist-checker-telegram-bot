import {
  InjectBot,
  Message,
  On,
  Start,
  Update,
  Help,
  Ctx,
  Command,
} from 'nestjs-telegraf';
import { Telegraf, Context } from 'telegraf';
import { ArtistService } from './services/artist.service';
import { UserService } from './services/user.service';
import configuration from '../../src/config';
import { User } from './entities/user.entity';
import { Artist } from './entities/artist.entity';
import { ErrorHandling } from './errors/error-handling';
import * as stringSimilarity from 'string-similarity';
import * as fs from 'fs';
import * as path from 'path';

@Update()
export class BotUpdate {
  private bannedUsers: Set<string> = new Set();
  private alertedBannedUsers: Set<string> = new Set();

  constructor(
    @InjectBot() private readonly bot: Telegraf<Context>,
    private readonly artistService: ArtistService,
    private readonly userService: UserService,
    private readonly errorHandling: ErrorHandling,
  ) {
    this.loadBannedUsers();
  }

  private async loadBannedUsers() {
    try {
      const bannedUsers = await this.userService.findBannedUsers();
      bannedUsers.forEach((user) => this.bannedUsers.add(user.telegram_id));
      console.log('Banned users loaded:', this.bannedUsers);
    } catch (error) {
      console.error('Error loading banned users:', error);
    }
  }

  private async banUser(telegram_id: string) {
    try {
      await this.userService.banUser(telegram_id); // Update DB
      this.bannedUsers.add(telegram_id); // Update in-memory Set
    } catch (error) {
      console.error('Error banning user:', error);
    }
  }

  private async unbanUser(telegram_id: string) {
    try {
      await this.userService.unbanUser(telegram_id); // Update DB
      this.bannedUsers.delete(telegram_id); // Update in-memory Set
    } catch (error) {
      console.error('Error unbanning user:', error);
    }
  }

  @Start()
  async startCommand(ctx: Context) {
    const telegram_id = ctx.message.chat.id.toString();

    // Check if the user is banned
    if (this.bannedUsers.has(telegram_id)) {
      // Check if the user has already been alerted
      if (!this.alertedBannedUsers.has(telegram_id)) {
        await ctx.reply('–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ'); // Alert the user
        this.alertedBannedUsers.add(telegram_id); // Mark the user as alerted
      }
      return; // Ignore further messages from banned users
    }

    await ctx.reply(`–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —á–∏ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∫–∞—Ü–∞–ø, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —ñ–º'—è.`);
    try {
      const telegram_id = JSON.stringify(ctx.message.chat.id);
      const user = await this.userService.findOne(telegram_id);
      if (!user) {
        await this.userService.create(
          Object.assign(new User(), {
            telegram_id,
            name: ctx.message.from.first_name,
          }),
        );
      }
    } catch (error) {
      console.error(error);
      await this.errorHandling.logAndPinError(
        `–ü–æ–º–∏–ª–∫–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö: ${error}`,
      );
    }
  }

  @Help()
  async helpCommand(ctx: Context) {
    const telegram_id = ctx.message.chat.id.toString();

    // Check if the user is banned
    if (this.bannedUsers.has(telegram_id)) {
      // Check if the user has already been alerted
      if (!this.alertedBannedUsers.has(telegram_id)) {
        await ctx.reply('–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ'); // Alert the user
        this.alertedBannedUsers.add(telegram_id); // Mark the user as alerted
      }
      return; // Ignore further messages from banned users
    }

    await ctx.reply(
      `*–©–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è, —á–∏ –≤–∏–∫–æ–Ω–∞–≤–µ—Ü—å –∫–∞—Ü–∞–ø, –≤–≤–µ–¥—ñ—Ç—å –π–æ–≥–æ —ñ–º'—è.* \n\nüõ† –î–æ–¥–∞—Ç–∫–æ–≤—ñ  —Ñ—É–Ω–∫—Ü—ñ—ó:\n\n/statistic ‚Äî –¥—ñ–∑–Ω–∞—Ç–∏—Å—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.`,
      {
        parse_mode: 'Markdown',
      },
    );
  }

  @Command('users')
  async sendUserList(@Ctx() ctx: Context) {
    try {
      // Check if the user is the admin
      if (ctx.message.from.id != parseInt(configuration.admin_id)) {
        await ctx.reply('–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!');
        return;
      }

      // Fetch all users from the database
      const users = await this.userService.findAll();

      if (!users.length) {
        await ctx.reply('No users found in the database.');
        return;
      }

      const sortedUsers = users.sort((a, b) => a.id - b.id);

      // Create the file content
      const fileContent = sortedUsers
        .map(
          (user) => `ID: ${user.telegram_id}, Name: ${user.name || 'Unknown'}`,
        )
        .join('\n');

      // Define the file path
      const filePath = path.resolve(__dirname, 'users.txt');

      // Write the content to the file
      fs.writeFileSync(filePath, fileContent);

      // Send the file to the admin
      await ctx.replyWithDocument({ source: filePath, filename: 'users.txt' });

      // Remove the file after sending
      fs.unlinkSync(filePath);
    } catch (error) {
      console.error('Error generating user list:', error);
      await ctx.reply('Failed to generate the user list.');
      await this.errorHandling.logAndPinError(
        `Error generating user list: ${error}`,
      );
    }
  }

  @Command('statistic')
  async statisticCommand(ctx: Context) {
    try {
      const telegram_id = ctx.message.chat.id.toString();

      // Check if the user is banned
      if (this.bannedUsers.has(telegram_id)) {
        // Check if the user has already been alerted
        if (!this.alertedBannedUsers.has(telegram_id)) {
          await ctx.reply('–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ'); // Alert the user
          this.alertedBannedUsers.add(telegram_id); // Mark the user as alerted
        }
        return; // Ignore further messages from banned users
      }

      const users = await this.userService.findAll();
      const artists = await this.artistService.findAll();

      await ctx.reply(
        `üë§ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤:  ${users.length};\n\nüë©‚Äçüé§ –ö—ñ–ª—å–∫—ñ—Å—Ç—å –≤–∏–∫–æ–Ω–∞–≤—Ü—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö:  ${artists.length};\n\nüíå –ó–≤'—è–∑–æ–∫ —ñ–∑ —Ä–æ–∑—Ä–æ–±–Ω–∏–∫–æ–º: @Driyko \n\nüí∞[–ú–æ–Ω–æ–±–∞–Ω–∫–∞](https://send.monobank.ua/jar/8qvQbTt34x) –¥–ª—è –æ—Ö–æ—á–∏—Ö –¥–æ–ø–æ–º–æ–≥—Ç–∏ –∑ —É—Ç—Ä–∏–º–∞–Ω–Ω—è–º –±–æ—Ç–∞.`,
        {
          parse_mode: 'Markdown',
        },
      );
    } catch (error) {
      console.error(error);
      await ctx.reply('–°–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–∞—Ü—é—î üòî');
      await this.errorHandling.logAndPinError(
        `–ü–æ–º–∏–ª–∫–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö: ${error}`,
      );
    }
  }

  @Command('sendMessage')
  async sendMessage(@Ctx() ctx: Context) {
    try {
      if (ctx.message.from.id == parseInt(configuration.admin_id)) {
        if (!('reply_to_message' in ctx.message)) {
          await ctx.reply(
            '–í–∏ –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–ª–∏ –Ω–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —â–æ –±–∞–∂–∞—î—Ç–µ –Ω–∞–¥—ñ—Å–ª–∞—Ç–∏!',
          );

          return console.log('No reply_to_message');
        }
        const replyMsg = ctx.message.reply_to_message;

        if (replyMsg) {
          const users = await this.userService.findAll();
          for (const user of users) {
            try {
              await ctx.telegram.sendCopy(user.telegram_id, replyMsg);
            } catch (error) {
              console.log(error);
              continue;
            }
          }

          await ctx.reply('–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ!');
        }
      } else {
        await ctx.reply('–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!');
      }
    } catch (error) {
      console.error(error);
      await ctx.reply('–°–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–∞—Ü—é—î üòî');
      await this.errorHandling.logAndPinError(`–ü–æ–º–∏–ª–∫–∞: ${error}`);
    }
  }

  @Command('addArtist')
  async addArtist(@Message('text') message: string, @Ctx() ctx: Context) {
    try {
      if (ctx.message.from.id == parseInt(configuration.admin_id)) {
        const name = message.match(/name="(.*?)"/)[1];
        const nationality = message.match(/nationality="(.*?)"/)[1];

        const artist = Object.assign(new Artist(), { name, nationality });

        await this.artistService.create(artist);

        await ctx.reply('–í–∏–∫–æ–Ω–∞–≤—Ü—è –¥–æ–¥–∞–Ω–æ!');
      } else {
        await ctx.reply('–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!');
      }
    } catch (error) {
      console.error(error);
      await ctx.reply('–°–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–∞—Ü—é—î üòî');
      await this.errorHandling.logAndPinError(
        `–ü–æ–º–∏–ª–∫–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö: ${error}`,
      );
    }
  }

  @Command('updateArtist')
  async updateArtist(@Message('text') message: string, @Ctx() ctx: Context) {
    try {
      if (ctx.message.from.id == parseInt(configuration.admin_id)) {
        const currentName = message.match(/name="(.*?)"/)[1];
        const newName = message.match(/new_name="(.*?)"/)?.[1] ?? null;
        const newNationality =
          message.match(/new_nationality="(.*?)"/)?.[1] ?? null;

        const artist = await this.artistService.findOne(currentName);

        if (!artist) {
          await ctx.reply('–¢–∞–∫–æ–≥–æ –≤–∏–∫–æ–Ω–∞–≤—Ü—è –Ω–µ–º–∞—î!');
        } else {
          const updatedArtist = Object.assign(artist, {
            name: newName ?? artist.name,
            nationality: newNationality ?? artist.nationality,
          });

          await this.artistService.update(artist.id, updatedArtist);

          await ctx.reply('–í–∏–∫–æ–Ω–∞–≤—Ü—è –æ–Ω–æ–≤–ª–µ–Ω–æ!');
        }
      } else {
        await ctx.reply('–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!');
      }
    } catch (error) {
      console.error(error);
      await this.errorHandling.logAndPinError(
        `–ü–æ–º–∏–ª–∫–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö: ${error}`,
      );
    }
  }

  @Command('ban')
  async banCommand(@Message('text') message: string, @Ctx() ctx: Context) {
    if (ctx.message.from.id !== parseInt(configuration.admin_id)) {
      await ctx.reply('–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!');
      return;
    }

    const telegram_id = message.split(' ')[1]; // Example: "/ban 123456"
    if (!telegram_id) {
      await ctx.reply('–í–∫–∞–∂—ñ—Ç—å telegram_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!');
      return;
    }

    await this.banUser(telegram_id);
    await ctx.reply(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${telegram_id} –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–æ!`);
  }

  @Command('unban')
  async unbanCommand(@Message('text') message: string, @Ctx() ctx: Context) {
    if (ctx.message.from.id !== parseInt(configuration.admin_id)) {
      await ctx.reply('–í–∏ –Ω–µ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä!');
      return;
    }

    const telegram_id = message.split(' ')[1]; // Example: "/unban 123456"
    if (!telegram_id) {
      await ctx.reply('–í–∫–∞–∂—ñ—Ç—å telegram_id –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞!');
      return;
    }

    await this.unbanUser(telegram_id);
    await ctx.reply(`–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${telegram_id} —Ä–æ–∑–±–ª–æ–∫–æ–≤–∞–Ω–æ!`);
  }

  @On('text')
  async getMessage(@Message('text') message: string, @Ctx() ctx: Context) {
    try {
      const telegram_id = ctx.message.chat.id.toString();

      // Check if the user is banned
      if (this.bannedUsers.has(telegram_id)) {
        // Check if the user has already been alerted
        if (!this.alertedBannedUsers.has(telegram_id)) {
          await ctx.reply('–í–∏ –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω—ñ'); // Alert the user
          this.alertedBannedUsers.add(telegram_id); // Mark the user as alerted
        }
        return; // Ignore further messages from banned users
      }

      const name = message.toLocaleLowerCase();
      const artist = await this.artistService.findOne(name);
      await ctx.telegram.forwardMessage(
        configuration.chat_for_all_logs,
        ctx.message.chat.id,
        ctx.message.message_id,
      );
      if (!artist) {
        const allArtists = await this.artistService.findAll();
        const threshold = 0.5;
        const similarArtists = allArtists
          .map((a) => ({
            artist: a,
            rating: stringSimilarity.compareTwoStrings(name, a.name),
          }))
          .filter((match) => match.rating >= threshold)
          .sort((a, b) => b.rating - a.rating);

        if (similarArtists.length > 0) {
          const replyMessage = `–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ üòî –ú–æ–∂–ª–∏–≤–æ, –≤–∏ –º–∞–ª–∏ –Ω–∞ —É–≤–∞–∑—ñ:\n\n${similarArtists
            .map((match) => `${match.artist.name}`)
            .join('\n')}`;
          const logMessage = `‚¨ÜÔ∏è –¶–µ, –º–æ–∂–ª–∏–≤–æ, –æ–¥—Ä—É–∫ —ñ –º–∞–ª–æ—Å—å –Ω–∞ —É–≤–∞–∑—ñ:\n\n${similarArtists
            .map((match) => `${match.artist.name}`)
            .join('\n')}`;
          await ctx.reply(replyMessage);
          await ctx.telegram.forwardMessage(
            configuration.chat_for_unknow_artists,
            ctx.message.chat.id,
            ctx.message.message_id,
          );
          await ctx.telegram.sendMessage(
            configuration.chat_for_unknow_artists,
            logMessage,
          );
        } else {
          await ctx.reply('–ù–∞ –∂–∞–ª—å, –Ω–µ –≤—ñ–¥–æ–º–æ, –∞–±–æ –∂ –≤–∏ –¥–æ–ø—É—Å—Ç–∏–ª–∏ –ø–æ–º–∏–ª–∫—É üòî');
          await ctx.telegram.forwardMessage(
            configuration.chat_for_unknow_artists,
            ctx.message.chat.id,
            ctx.message.message_id,
          );
        }
      } else {
        await ctx.reply(artist.nationality);
      }
    } catch (error) {
      console.error(error);
      await ctx.reply('–°–µ—Ä–≤–µ—Ä –Ω–µ –ø—Ä–∞—Ü—é—î üòî');
      await this.errorHandling.logAndPinError(
        `–ü–æ–º–∏–ª–∫–∞ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö: ${error}`,
      );
    }
  }
}
